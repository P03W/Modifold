package com.github.p03w.modifold.modrinth_api

import com.github.p03w.modifold.cli.ModifoldArgs
import com.github.p03w.modifold.cli.ModifoldArgsContainer.DONT
import com.github.p03w.modifold.conversion.mapCategories
import com.github.p03w.modifold.curseforge_schema.CurseforgeProject
import com.github.p03w.modifold.curseforge_schema.ModrinthTeamMember

@Suppress("DataClassPrivateConstructor")
data class ModrinthModCreate private constructor(
    val mod_name: String,
    val mod_slug: String,
    val mod_description: String,
    val mod_body: String = "Autogenerated project from modifold",
    val initial_versions: List<Any> = emptyList(),
    val team_members: List<ModrinthTeamMember> = emptyList(),
    val categories: List<String>,
    val issues_url: Any? = null,
    val source_url: Any? = null,
    val wiki_url: Any? = null,
    val license_id: String,
    val license_url: Any? = null,
    val discord_url: Any? = null,
    val is_draft: Boolean = true,
    val client_side: String = "required",
    val server_side: String = "required",
    val donation_urls: List<Any> = emptyList()
) {
    companion object {
        fun of(curseforgeProject: CurseforgeProject): ModrinthModCreate {
            return ModrinthModCreate(
                mod_name = curseforgeProject.name,
                mod_slug = curseforgeProject.slug,
                mod_description = curseforgeProject.summary,
                license_id = ModifoldArgs.args.defaultLicense,
                discord_url = ModifoldArgs.args.discordServer,
                categories = if (ModifoldArgs.args.donts.contains(DONT.MAP_CATEGORIES)) emptyList() else mapCategories(
                    curseforgeProject.categories
                )
            )
        }
    }
}
