package com.github.p03w.modifold.modrinth_api

import com.github.p03w.modifold.cli.ModifoldArgs
import com.github.p03w.modifold.cli.ModifoldArgsContainer.DONT
import com.github.p03w.modifold.conversion.mapCategories
import com.github.p03w.modifold.curseforge_schema.CurseforgeProject

@Suppress("DataClassPrivateConstructor")
data class ModrinthProjectCreate private constructor(
    val slug: String,
    val title: String,
    val description: String,
    val body: String = "Autogenerated project from modifold",

    val categories: List<String>,

    val client_side: String = "required",
    val server_side: String = "required",

    val issues_url: Any? = null,
    val source_url: Any? = null,
    val wiki_url: Any? = null,
    val discord_url: Any? = null,
    val donation_urls: List<Any>? = null,

    val license_id: String,
    val license_url: Any? = null,

    val project_type: String = "mod",
    val initial_versions: List<Any> = emptyList(),
    val is_draft: Boolean = true,
    val gallery_items: List<Any>? = null
) {
    companion object {
        fun of(curseforgeProject: CurseforgeProject): ModrinthProjectCreate {
            return ModrinthProjectCreate(
                title = curseforgeProject.name,
                slug = curseforgeProject.slug,
                description = curseforgeProject.summary,
                license_id = ModifoldArgs.args.defaultLicense,
                discord_url = ModifoldArgs.args.discordServer.takeUnless { it.isEmpty() },
                categories = if (ModifoldArgs.args.donts.contains(DONT.MAP_CATEGORIES)) emptyList() else mapCategories(
                    curseforgeProject.categories
                ),
                issues_url = curseforgeProject.links.issuesUrl,
                source_url = curseforgeProject.links.sourceUrl,
                wiki_url = curseforgeProject.links.wikiUrl
            )
        }
    }
}
